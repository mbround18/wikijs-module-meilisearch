name: Build and Release WASM

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          components: rustfmt, clippy

      - name: Rustfmt Check
        uses: actions-rust-lang/rustfmt@v1

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup System
        run: |
          sudo apt-get update && sudo apt-get install --no-install-recommends -y cmake pkg-config libssl-dev zip
          make setup
          make build

      - name: Create ZIP file
        run: |
          cd pkg && zip -r ../millisearch.zip ./*

      - name: Check for VERSION changes
        id: check_version
        run: |
          VERSION=$(cat VERSION)
          git fetch --prune --tags

          if git show-ref --tags --verify --quiet "refs/tags/v$VERSION"; then
            echo "result=\"no changes\"" >> $GITHUB_OUTPUT
          else
            echo "result=changes" >> $GITHUB_OUTPUT
          fi

      - name: Create Release Tag and Upload
        if: steps.check_version.outputs.result != 'no changes'
        id: create_release
        run: |
          VERSION=$(cat VERSION)
          TAG="v$VERSION"
          echo "Creating Release $TAG"
          gh release create $TAG millisearch.zip --title "$TAG" --notes "Release notes for version $VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
